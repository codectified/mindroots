// Load roots data
LOAD CSV WITH HEADERS FROM 'https://theoption.life/data/processed_roots.csv' AS rootRow
MERGE (root:Root {root_id: toInteger(rootRow.id), arabic: rootRow.`arabic`, transliteration: rootRow.transliteration, r3: rootRow.r3, r2: rootRow.r2, r1: rootRow.r1})




// Load words and link them to the corresponding roots
LOAD CSV WITH HEADERS FROM 'https://theoption.life/data/filtered_sorted_roots_and_words_with_root_ids.csv' AS row
WITH row
// Create or match the Word node with the root_id property
MERGE (word:Word {word_id: toInteger(row.id), arabic: row.arabic})
ON CREATE SET word.root_id = toInteger(row.root_id)
WITH word, row
// Match the corresponding Root node
MATCH (root:Root {root_id: toInteger(row.root_id)})
// Create the HAS_ROOT relationship
MERGE (word)-[:HAS_ROOT]->(root)




// Load the new words data from CSV
LOAD CSV WITH HEADERS FROM 'https://theoption.life/data/newwords.csv' AS row
WITH row

// Convert the form_id list to an array
WITH row, [x IN split(replace(replace(row.form_id, '[', ''), ']', ''), ',') | toInteger(x)] AS form_ids

// Try to match an existing Word node by word_id
MERGE (word:Word {word_id: toInteger(row.word_id)})
ON CREATE SET
    word.root_id = toInteger(row.root_id),
    word.arabic = row.arabic,
    word.english = row.english,
    word.form_id = form_ids
ON MATCH SET
    word.form_id = form_ids,
    word.english = row.english

// Link the Word node to the corresponding Root node
WITH row, word
MATCH (root:Root {root_id: toInteger(row.root_id)})
MERGE (word)-[:HAS_ROOT]->(root)

RETURN word.word_id AS word_id, word.arabic AS word, word.root_id AS root_id, word.english AS english, word.form_id AS form_id;


// Load forms data
WITH *  // Pass all variables to the next context
LOAD CSV WITH HEADERS FROM 'https://theoption.life/data/forms.csv' AS formRow
MERGE (form:Form {form_id: toInteger(formRow.id), arabic: formRow.arabic, english: formRow.english})




// Link Word nodes that have a form_id to their corresponding Form nodes
MATCH (word:Word)
WHERE word.form_id IS NOT NULL

// Unwind the form_id array to process each form_id individually
UNWIND word.form_id AS form_id

// Match the corresponding Form node
MATCH (form:Form {form_id: form_id})

// Create the HAS_FORM relationship between the Word and Form nodes
MERGE (word)-[:HAS_FORM]->(form)

RETURN word.word_id AS word_id, word.arabic AS word, collect(form.form_id) AS linked_form_ids;


// Load quran as corpus items
LOAD CSV WITH HEADERS FROM 'https://theoption.life/data/quran.csv' AS quranRow
WITH quranRow 
WHERE quranRow.qid IS NOT NULL
MERGE (item:CorpusItem {item_id: toInteger(quranRow.qid), corpus_id: toInteger(quranRow.corpus_id), arabic: quranRow.arabic, english: quranRow.english})




// Load names of allah as corpus items data
WITH *  // Pass all variables to the next context
LOAD CSV WITH HEADERS FROM 'https://theoption.life/data/most_excellent_names.csv' AS nameRow
WITH nameRow 
WHERE nameRow.arabic IS NOT NULL AND nameRow.id IS NOT NULL
MERGE (item:CorpusItem {item_id: toInteger(nameRow.id), corpus_id: toInteger(nameRow.corpus_id), arabic: nameRow.arabic, transliteration: nameRow.transliteration, english: nameRow.english})




LOAD CSV WITH HEADERS FROM 'https://theoption.life/data/newmapping.csv' AS mappingRow
MATCH (word:Word {word_id: toInteger(mappingRow.derivative_id)})
MATCH (item:CorpusItem {item_id: toInteger(mappingRow.item_id), corpus_id: toInteger(mappingRow.corpus_id)})
MERGE (item)-[:HAS_WORD]->(word)

// Load corpora nodes with Arabic and English names
LOAD CSV WITH HEADERS FROM 'https://theoption.life/data/corpora.csv' AS corpusRow
MERGE (corpus:Corpus {
    corpus_id: toInteger(corpusRow.id)
})
SET corpus.arabic = corpusRow.arabic,
    corpus.english = corpusRow.english

// Link corpus items to Corpus nodes
WITH *
MATCH (item:CorpusItem), (corpus:Corpus {corpus_id: item.corpus_id})
MERGE (item)-[:BELONGS_TO]->(corpus)
